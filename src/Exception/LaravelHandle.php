<?php
namespace Iayoo\ApiResponse\Exception;
use Iayoo\OpenApi\Exception\AuthException;
use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Contracts\Support\Responsable;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Database\RecordsNotFoundException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Http\JsonResponse;
use Illuminate\Routing\Router;
use Illuminate\Session\TokenMismatchException;
use Illuminate\Validation\ValidationException;
use Symfony\Component\HttpFoundation\Exception\SuspiciousOperationException;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;

class LaravelHandle extends ExceptionHandler
{
    protected $ignoreTrace = [

    ];

    protected $exceptionMap = [
        AuthException::class
    ];

    public function report(Throwable $e)
    {
        return parent::report($e); // TODO: Change the autogenerated stub
    }

    public function register()
    {
        parent::register(); // TODO: Change the autogenerated stub
    }

    protected function prepareException(Throwable $e)
    {
        if ($e instanceof ModelNotFoundException) {
            $e = new NotFoundHttpException($e->getMessage(), $e);
        } elseif ($e instanceof AuthorizationException) {
            $e = new AccessDeniedHttpException($e->getMessage(), $e);
        } elseif ($e instanceof TokenMismatchException) {
            $e = new HttpException(419, $e->getMessage(), $e);
        } elseif ($e instanceof SuspiciousOperationException) {
            $e = new NotFoundHttpException('Bad hostname provided.', $e);
        } elseif ($e instanceof RecordsNotFoundException) {
            $e = new NotFoundHttpException('Not found.', $e);
        } elseif ($e instanceof AuthException){
            $e = new AuthenticationException($e->getMessage());
        }

        return $e;
    }

    public function render($request, Throwable $e)
    {
        if (method_exists($e, 'render') && $response = $e->render($request)) {
            return Router::toResponse($request, $response);
        } elseif ($e instanceof Responsable) {
            return $e->toResponse($request);
        }

        $e = $this->prepareException($this->mapException($e));



        foreach ($this->renderCallbacks as $renderCallback) {
            foreach ($this->firstClosureParameterTypes($renderCallback) as $type) {
                if (is_a($e, $type)) {
                    $response = $renderCallback($e, $request);

                    if (! is_null($response)) {
                        return $response;
                    }
                }
            }
        }

        if ($e instanceof HttpResponseException) {
            return $e->getResponse();
        } elseif ($e instanceof AuthenticationException) {
            return $this->unauthenticated($request, $e);
        } elseif ($e instanceof ValidationException) {
            return $this->convertValidationExceptionToResponse($e, $request);
        } elseif ($e instanceof NotFoundHttpException){
            return $this->undefined($request,$e);
        }

        return $this->shouldReturnJson($request, $e)
            ? $this->prepareJsonResponse($request, $e)
            : $this->prepareResponse($request, $e);
    }

    protected function undefined($request, NotFoundHttpException $exception){
        if (!$this->shouldReturnJson($request, $exception)){
            return $this->prepareResponse($request, $exception);
        }
        return new JsonResponse(
            [
                'message' => 'api undefined',
                'status'  => 40000,
                'data'    => [],
            ],
            200,
            $this->isHttpException($exception) ? $exception->getHeaders() : [],
            JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES
        );
    }

    protected function unauthenticated($request, AuthenticationException $exception)
    {
        if (!$this->shouldReturnJson($request, $exception)){
            redirect()->guest($exception->redirectTo() ?? route('login'));
        }
        return new JsonResponse(
            [
                'message' => $exception->getMessage(),
                'status'  => 40100,
                'data'    => [],
            ],
            $this->isHttpException($exception) ? $exception->getStatusCode() : 200,
            $this->isHttpException($exception) ? $exception->getHeaders() : [],
            JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES
        );
    }


    public function prepareJsonResponse($request, Throwable $e)
    {
        return new JsonResponse(
            [
                'message' => $e->getMessage(),
                'status'  => $e->getStatusCode(),
                'data'    => $this->convertExceptionToArray($e),
            ],
            $this->isHttpException($e) ? $e->getStatusCode() : 200,
            $this->isHttpException($e) ? $e->getHeaders() : [],
            JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES
        );
    }
}